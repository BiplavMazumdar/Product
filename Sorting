1)Find Largest element in Array;

class HelloWorld {
    public static void main(String[] args) {
        System.out.println("Hello, World!");
        int arr[] = {12,23,3,4,5,6};
        
        int temp = arr[0];
        
        for(int i = 0;i<arr.length;i++){
            if(temp<arr[i]){
                temp = arr[i];
            }
            
        }
        
        System.out.println(temp);
    }
}

** BUbble Sort

Bubble Sort: It’s one of the simplest algorithms which repeatedly iterates through the list, compares the elements next to each other, 
and swaps according to the condition passed to them. Confusing isn’t it? It would be right to say this Sorting as an idea or approach to
solving a problem what we people usually do (Brute force Solution).

largest element ko push to back and arrange 


time complexity = O(n^2)


 public static void main(String[] args) {
       
       int arr[] = {23,34,5,6,7,56};
       
        for(int i = 0;i<arr.length-1;i++){
            for(int j = 0;j<arr.length-i-1;j++){
                if(arr[j] > arr[j+1]){
                    int temp = arr[j];
                    arr[j] = arr[j+1];
                    arr[j+1] = temp;
                }
            }
    }
    
    System.out.println(Arrays.toString(arr));
      
    }
    
    
** Selection Sort
In selection sort algorithm, we search for the lowest element and arrange it to the proper location. We swap the current element with the next lowest number.
time complexity = O(n^2)


1 iteration for 1 swap

int arr[] = {12,23,34,54,65,778,3};
        
        for(int i = 0;i<arr.length-1;i++){
            int smallest = i;
            for(int j = i+1;j<arr.length;j++){
                if(arr[smallest] > arr[j]){
                    smallest = j;
                }
            }
            
            int temp = arr[smallest];
            arr[smallest] = arr[i];
            arr[i] = temp;
            
        }
        
        System.out.println(Arrays.toString(arr));


** Insertion Sort

it will take one element and try to arrange in the sorted part so sorted part start arrange and unsorted start decresing

int arr[] = {7,8,3,1,2}

let say 7 (sorted)| 8 3 1 2 (unsorted)

now it will take 8 and try to arrange it 

7 8 | 3 1 2


int arr[] = {12,3,34,56,67};
        
        for(int i = 0;i<arr.length;i++){
            int current = arr[i];
            int j = i-1;
            while(j>=0 && current < arr[j]){
                arr[j+1] = arr[j];
                j--;
            }
            
            //placement
            
            arr[j+1] = current;
            
        }
        
        System.out.println(Arrays.toString(arr));
    
    /////////
    $$ Important __Merge Sort
    
    Divide and Conquer
    
    int arr[] = {6,3,9,5,2,8}
    
    first divide 
    
                      6,3,9           |          5,2,8
                  6,3 | 9                      5,2 | 8
    
    
    
    
    ##4 Quick Sort
    
    pivot and partition 
    
    pivot around surround items rotate hota haa
    or we can say that central point 
    
    int arr[] = {6,3,9,5,2,8}
    
    we can choose our pivot in 4 ways
    
    1 => random take any number in array
    2 => median calculate 
    3 => first element of array
    4 => last element array
    
    here we will use last element sa pivot start karna  (4)
    
              6,3,9,5,2,8
              
              pivot last element = 8
              
              6,3,5,2             9
    here 2 is pivot last element 
    
              empty      6,3,5
              
              3  |  6
  
  so we can do like this 
  
    
    
