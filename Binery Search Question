Binery Search Question

when to use Binery search 
1)when you have given sorted array
2)square root wala mae bhi 

Q1 :- Find the Celing of the number 

Ceil maeans to convert [3.2 to 4] round off


we have to check which number is nearest bigest number to the target 

here we Know that Star mid End 

then they will cross each other 

End mid Start 

so this is condition where loop will break 
next big number will be start 

while(start <= end) This Condition 

so on return insist of retrun -1 we have to use return start;

Question is same but this time we have to find floor the we can use the return end;


// Online Java Compiler
// Use this editor to write, compile and run your Java code online

class HelloWorld {
    public static void main(String[] args) {
        //celing of the given number
        
        int arr[] = {2,3,5,9,14,16,18};
        int target = 15;
        
        int res = ceil(arr,target);
        
        System.out.println(res);
    }
    
    //here 
  //  start = 14 mid = 15  end = 16
    
  //  but after breaking the while loop 
  // start  = 16 mid = 15 end = 14
  
    static int ceil(int arr[],int target){
        int start = 0;
        int end = arr.length-1;
                    int data = 0;

        while(start <= end){
            int mid = (start+end)/2;
   
            if(target > arr[mid]){
                start = mid + 1;
            }else{
                end = mid - 1;
            }
        }return start;
    }
}

Q2 If the Target Number is Greater than the gretest Number in the Array 

// Online Java Compiler
// Use this editor to write, compile and run your Java code online

class HelloWorld {
    public static void main(String[] args) {
        //celing of the given number
        
        int arr[] = {2,3,5,9,14,16,18};
        int target = 45;
        
        int res = ceil(arr,target);
        
        System.out.println(res);
    }
    
    static int ceil(int arr[],int target){
        int start = 0;
        int end = arr.length-1;
                    int data = 0;

        while(start <= end){
            int mid = (start+end)/2;
            
            if(target>arr[arr.length-1]){
                return -1;
            }
   
   
            if(target > arr[mid]){
                start = mid + 1;
            }else{
                end = mid - 1;
            }
        }return start;
    }
}



Q3 Leet Code Question Find Smallest Letter greater than Target;


class Solution {
    public char nextGreatestLetter(char[] letters, char target) {
        
         int start = 0;
        int end = letters.length - 1;

        while(start <= end) {
            // find the middle element
//            int mid = (start + end) / 2; // might be possible that (start + end) exceeds the range of int in java
            int mid = start + (end - start) / 2;

            if (target < letters[mid]) {
                end = mid - 1;
            } else {
                start = mid + 1;
            }
        }
        return letters[start % letters.length];
        

}
}  




Q4:- Find First and Last Position of Element in Sorted Array  //Facebook

let take one array [1,2,3,3,3,3,3,34,45,78,98];
taget is 3;

but the condition is we have to find taget ka first occurance and last occurance so we have to continues loop chalana pada ga until first wala mil nahi jata 

https://www.youtube.com/watch?v=Y7LiLNdayF0


Q5:- Find position of an element in a sorted array of infinite numbers. Amazon

// https://www.geeksforgeeks.org/find-position-element-sorted-array-infinite-numbers/


// Online Java Compiler
// Use this editor to write, compile and run your Java code online

Approch :- we Know the start but we don't know the end so we will go with the chunk and every time double it and chek if target > arr[end]  


class HelloWorld {
    public static void main(String[] args) {
        
        int arr[] = {3, 5, 7, 9, 10, 90,
                100, 130, 140, 160, 170};
                
        int target = 10;
        
        int res = ans(arr,target);
        
        System.out.println(res);
       
    }
    
    static int ans(int arr[],int target){
        
        int start = 0;
        int end = 1;
        
        while(target > arr[end]){
            int temp = end + 1;
            end = end+(end-start)*2;
            
            start = temp;
        }return binery(arr,target,start,end);
        
    }
    
    
    static int binery(int arr[],int target,int start,int end){
        while(start<=end){
            
            int mid = (start+end)/2;
            
            if(target > arr[mid]){
                start = mid + 1;
            }else if(target < arr[mid]){
                end = mid - 1;
            }else{
                return mid;
            }
        }return -1;
    }
    
    
    
}

Q6 :- Peak Index in a Mountain Array or also Know as bitonic array

In this we have to find the larget number or Mountain peak  

 // https://leetcode.com/problems/peak-index-in-a-mountain-array/
    // https://leetcode.com/problems/find-peak-element/

first number in a asending order then in desending order we have to find the peak value 

int arr[] = {10,20,30,40,50,7,6,5,4,3,2,1};

peak is 50

sol:- 

we have to check with two condition 

1) if end[mid] > end[mid + 1]  it show that we are in the decending part or decending order or decending part of array

2) if end[mid] < end[mid+1] it show that we are in the assending part or assending order or assending part of array

3) When will loop break ?
In the end both start and end in the largest number only , start and end = largest number breaking point 

// Online Java Compiler
// Use this editor to write, compile and run your Java code online

class HelloWorld {
    public static void main(String[] args) {
        System.out.println("Hello, World!"); 
        
        int arr[] = {10,20,30,40,50,60,7,6,5,4,3,2,1};
        
        System.out.println(search(arr));
    }
    
    static int search(int arr[]){
        int start = 0;
        int end = arr.length-1;
        
        while(start <  end){
            int mid = (start+end)/2;
            
            //condition 1
            
            if(arr[mid] > arr[mid+1]){
                //we are in the decending order
                end = mid;
            }else{
                //we are in the assending order
                start = mid + 1; 
                //because we know mid+1 is great than mid
            }
             // in the end, start == end and pointing to the largest number because of the 2 checks above
        // start and end are always trying to find max element in the above 2 checks
        // hence, when they are pointing to just one element, that is the max one because that is what the checks say
        // more elaboration: at every point of time for start and end, they have the best possible answer till that time
        // and if we are saying that only one item is remaining, hence cuz of above line that is the best possible ans
            
        }return start;  // or return end as both are 
    }
}

Q7 Search In Mountain Arrays

[1,2,3,4,5,3,1]

Sol :- 
step1 : Find Peak Element 
Step 2 : Binary Search in assending array
step 3 : If not found binary search in decending array







